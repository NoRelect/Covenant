@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using Covenant.Models.Listeners

<EditForm Model="HostedFile" OnValidSubmit="OnFormSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-row">
        <div class="form-group col-md-4">
            <label>Path</label>
            <InputText @bind-Value="HostedFile.Path" class="form-control" />
            <div class="text-danger"><ValidationMessage For="() => HostedFile.Path" /></div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="Content">Content</label>
            <InputFile id="Content" name="Content" class="form-control-file" OnChange="FileUpload" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">
        <span class="fe fe-@SubmitIcon"></span> @SubmitLabel
    </button>
    @ChildContent
</EditForm>

@code {
    [Parameter]
    public HostedFile HostedFile { get; set; }

    [Parameter]
    public EventCallback<HostedFile> OnSubmit { get; set; }

    [Parameter]
    public string SubmitIcon { get; set; }

    [Parameter]
    public string SubmitLabel { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private async Task FileUpload(InputFileChangeEventArgs args)
    {
        var file = args.File;
        using var ms = new MemoryStream();
        await using var stream = file.OpenReadStream();
        await stream.CopyToAsync(ms);
        HostedFile.Content = Convert.ToBase64String(ms.ToArray());
    }

    private async Task OnFormSubmit()
    {
        await OnSubmit.InvokeAsync(HostedFile);
    }
}
