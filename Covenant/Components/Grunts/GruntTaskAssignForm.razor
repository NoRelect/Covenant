@inherits OwningComponentBase<ICovenantService>

@using System.IO
@using System.Threading
@using Microsoft.AspNetCore.Components.Forms
@using Covenant.Core
@using Covenant.Models.Grunts

@if (GruntTasks == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="GruntTask" OnValidSubmit="(e => this.OnTask())">
        <DataAnnotationsValidator />
        <div class="form-group col-md-4">
            <label for="GruntTaskId">GruntTask</label>
            <select id="GruntTaskId" name="GruntTaskId" @onchange="(e => OnChangeGruntTask(e))" class="form-control">
                @foreach (GruntTask task in GruntTasks)
                {
                    @if (GruntTask.Id == task.Id)
                    {
                        <option selected value="@task.Id">@task.Name</option>
                    }
                    else
                    {
                        <option value="@task.Id">@task.Name</option>
                    }
                }
            </select>
        </div>
        <div>
            @for (var i = 0; i < GruntTask.Options.Count; i++)
            {
                var number = i;
                @if (GruntTask.Options[i].FileOption)
                {
                    <div class="form-group col-md-12">
                        <label for="@GruntTask.Options[number].Name">@GruntTask.Options[number].Name</label><br />
                        <InputFile @ref="TaskInputFile" id="@GruntTask.Options[number].Name" OnChange="OnUpload" />
                        @if (this.UploadInProgress)
                        {
                            <span class="fe fe-loader spin"></span>
                        }
                        @if (string.IsNullOrEmpty(ErrorMessage))
                        {
                            <span class="text-danger">@ErrorMessage</span>
                        }
                    </div>
                }
                else
                {
                    <div class="form-group col-md-12">
                        <label for="@GruntTask.Options[number].Name">@GruntTask.Options[number].Name</label>
                        <input id="@GruntTask.Options[number].Name" name="@GruntTask.Options[number].Name" @bind="GruntTask.Options[number].Value" class="form-control">
                        <div class="text-danger"><ValidationMessage For="() => GruntTask.Options[number].Value" /></div>
                    </div>
                }
            }
        </div>
        <div class="form-group col-md-4">
            <button type="submit" class="btn btn-primary">
                <span class="fe fe-play"></span>
                Task
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int GruntId { get; set; }

    [Parameter]
    public EventCallback<GruntTask> OnSubmit { get; set; }

    public InputFile TaskInputFile { get; set; }
    private SemaphoreSlim UploadSemaphore { get; set; } = new(1, 1);
    private bool UploadInProgress { get; set; }

    private IList<GruntTask> GruntTasks { get; set; }
    private GruntTask GruntTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GruntTasks = (await Service.GetGruntTasksForGrunt(GruntId)).OrderBy(gruntTask => gruntTask.Name).ToList();
        Service.DisposeContext();
        GruntTask = GruntTasks.First();
    }

    private async Task OnTask()
    {
        await UploadSemaphore.WaitAsync();
        await OnSubmit.InvokeAsync(GruntTask);
        UploadSemaphore.Release();
    }

    private void OnChangeGruntTask(ChangeEventArgs e)
    {
        if (!int.TryParse((string)e.Value, out var gruntTaskId))
            return;
        GruntTask = GruntTasks.FirstOrDefault(gruntTask => gruntTask.Id == gruntTaskId);
        StateHasChanged();
    }

    private string ErrorMessage { get; set; }
    private async Task OnUpload(InputFileChangeEventArgs args)
    {
        try
        {
            await UploadSemaphore.WaitAsync();
            UploadInProgress = true;
            StateHasChanged();
            var files = args.GetMultipleFiles();
            var i = 0;
            foreach (var file in files)
            {
                using var ms = new MemoryStream();
                await using var stream = file.OpenReadStream();
                await stream.CopyToAsync(ms);

                var option = GruntTask.Options.Where(o => o.FileOption).ToList()[i];
                option.Value = Convert.ToBase64String(ms.ToArray());
                i++;
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
        UploadInProgress = false;
        StateHasChanged();
        UploadSemaphore.Release();
    }
}