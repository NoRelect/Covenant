@inherits OwningComponentBase<ICovenantService>

@using System.IO
@using System.Threading
@using Microsoft.JSInterop
@using Covenant.Core
@using Covenant.Models.Grunts
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime IJSRuntime

<div class="modal fade" id="file-modal" tabindex="-1" role="dialog" aria-labelledby="file-modal-label" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="file-modal-label">Select File</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (GruntTask != null)
                {
                    @for (var i = 0; i < GruntTask.Options.Count; i++)
                    {
                        var number = i;
                        @if (GruntTask.Options[number].FileOption)
                        {
                            <div class="form-group">
                                <label for="@GruntTask.Options[number].Name">@GruntTask.Options[number].Name</label><br />
                                <InputFile @ref="InputFile" id="@GruntTask.Options[number].Name" OnChange="OnUpload" />
                                @if (UploadInProgress)
                                {
                                    <span class="fe fe-loader spin"></span>
                                }
                                @if (string.IsNullOrEmpty(this.ErrorMessage))
                                {
                                    <span class="text-danger">@ErrorMessage</span>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <label for="@GruntTask.Options[number].Name">@GruntTask.Options[number].Name</label>
                                <input id="@GruntTask.Options[number].Name" name="@GruntTask.Options[number].Name" @bind="GruntTask.Options[number].Value" class="form-control">
                            </div>
                        }
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" @onclick="Execute" class="btn btn-primary">Execute</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<GruntTask> OnSubmit { get; set; }

    private GruntTask GruntTask { get; set; }
    private InputFile InputFile { get; set; }
    private IList<MemoryStream> UploadedFiles { get; set; }
    private SemaphoreSlim UploadSemaphore { get; set; } = new SemaphoreSlim(1, 1);
    private bool UploadInProgress { get; set; }

    public async Task Show(GruntTask task)
    {
        GruntTask = task;
        StateHasChanged();
        await IJSRuntime.InvokeAsync<string>("ActivateModal", "#file-modal");
    }

    private async Task Execute()
    {
        await UploadSemaphore.WaitAsync();
        if (UploadedFiles != null && GruntTask.Options.Any(O => O.FileOption && string.IsNullOrEmpty(O.Value)))
        {
            OnRead(UploadedFiles);
        }
        UploadSemaphore.Release();
        await IJSRuntime.InvokeAsync<string>("ModalCommand", "#file-modal", "hide");
        await OnSubmit.InvokeAsync(GruntTask);
    }

    private string ErrorMessage { get; set; }
    private async Task OnUpload(InputFileChangeEventArgs args)
    {
        try
        {
            await UploadSemaphore.WaitAsync();
            UploadInProgress = true;
            StateHasChanged();
            UploadedFiles = new List<MemoryStream>();
            var files = args.GetMultipleFiles();
            foreach (var file in files)
            {
                using var ms = new MemoryStream();
                await using var stream = file.OpenReadStream();
                await stream.CopyToAsync(ms);
                UploadedFiles.Add(ms);
                OnRead(UploadedFiles);
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
        }
        UploadInProgress = false;
        StateHasChanged();
        UploadSemaphore.Release();
    }

    private void OnRead(IList<MemoryStream> streams)
    {
        try
        {
            for (var i = 0; i < streams.Count(); i++)
            {
                var option = GruntTask.Options.Where(o => o.FileOption).ToList()[i];
                option.Value = Convert.ToBase64String(streams[i].ToArray());
                UploadedFiles[i] = new MemoryStream(Convert.FromBase64String(option.Value));
            }
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            StateHasChanged();
        }
    }
}
